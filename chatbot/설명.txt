1. 전처리 과정 utils/preprocess.py로 전처리 클래스 만들기
2. 챗봇엔진에서 의도 분류 및 개체명 인식 모델 학습을 하려면 단어 사전을 구축해야하기 때문에 단어 사전 구축하기
3. train_tools/dict/create_dict.py에 단어 사전 구축 (총 4,004,000개의 문장 사용)

4. 사용자가 문장을 입력했을 때 전처리 과정을 거친 후 해당 문장의 의도를 분류할 수 있게 의도 분류기를 만들어야한다. 의도 분류기는 CNN 모델 사용
5. 의도분류모델을 위한 데이터 생성을 하고 train_data.csv 파일로 저장
(번호, 장소, 시간에 적합한 5만개 문장 데이터 사용)
   0 - 번호  1 - 장소 2 - 시간으로 생성함
6.  벡터(텍스트)의 크기를 같게 만들어줘야 CNN 학습이 가능 단어 시퀀스 벡터 크기를 맞추기 위해 패딩 처리를 해주기위해 패딩길이구하기.ipynb를 통해서 적절한 패딩 길이 구함
7. config/GlobalParams.py에 저장함
8. 의도 분류모델은 /models/intent/train_model.py 생성
9. train_model.py로 의도 분류 모델을 생성하면 메인에 intent_model.h5 모델이 생성됨
9-1. 의도분류모델을 챗봇 엔진에서 사용하기 위해 모듈로 생성             /models/intent/IntentModel.py로 생성

10. 클라이언트가 질문한 입력을 임베딩 하고 입력과 구축한 데이터에서의 유사한 질문을 뽑아내는 방법을 코사인 유사도를 사용하여 구한다.
11. 서울대학교에서 개발한 KR-SBERT라는 문장 임베딩 모델을 이용
     https://github.com/snunlp/KR-SBERT 
- 문장 임베딩은 문장 전체를 벡터로 표현하는 방법- 전체 문장의 흐름을 파악해 벡터      로 변환하기 때문에 문맥적 의미를 지니는 장점이 있음
12. 임베딩은 train_tools/qna/create_embedding_data.py 생성
13. main에 embedding_data.pt가 생성됨
13-1. 챗봇 엔진에서 사용하기 위해 모듈화함 즉 챗봇엔진 서버가 실행될 때마다 
        ./train_tools/qna/embedding_data.pt로 새로 생성됨

14. 개발 목표로 하는 챗봇 엔진은 챗봇 서버를 만들어 웹에서 서비스 하는 것이다.
15. 즉 여러 명의 이용자가 챗봇 엔진에 접속해 질문에 대한 답변을 할 수 있도록 구현해야 한다.
16. 다수의 챗봇 클라이언트에 대해 요청을 처리해야 하기 때문에 멀티 스레딩 방식으로 구현한다.
17. 챗봇엔진에 요청하고 응답받을 때 JSON 형태를 통해 주고받도록 한다. 
18. tcp소켓 서버를 관리하는 모듈 즉 서버에 접속하는 클라이언트 소켓을 생성하고 처리하는 모듈을 utils/BotServer.py 생성

19. 앞에서 만든 임베딩 저장 기능과 유사도 비교를 통한 점수 측정 기능을 챗봇 엔진에서 사용하기 위해 클래스화 시키도록한다. 
20. 챗봇 엔진에서 사용하기 위해 train_tools/qna/create_embedding_data.py 에 클래스화 시킴
21. 답변 검색 클래스 utils/FindAnswer.py 생성
22. BotServer 클래스, 멀티 스레드 모듈을 사용해 챗봇 엔진을 완성함
23. main에 챗봇 엔진 서버 chatbot.py 생성

순서정리
문장이 들어오면 
1. 전처리(형태소,품사 태거 / 불용어 제거)
2. 문장 임베딩처리(전처리된 문장 tensor화시킴(수치화))
3. 코사인 유사도를 이용해 질문답변 엑셀에서 '질문 데이터 선택'
4. 선택된 질문에서 의도(번호(0), 장소(1), 시간(2)) 선택
5. 최종적으로 선택된 질문 문장 인코딩하여 '유사도 점수 측정'
6. 유사도 점수가 가장 높은 답변 출력

+추가 1)
- 유사도를 비교하는 과정에서 SBERT 모델을 사용하며 pytorch를 이용하는데 만약 cpu가 아닌 gpu 사용시 메모리 부족 현상이 발생할 가능성이 있음
- 그래서 추가로 gpu 메모리 할당이 필요한 경우(서버 환경에서 다른 프로그램을 상시 실행하는 겨우)등 여러 상황에 대비해 적절한 메모리의 할당이 필요함
- 그래서 main chatbot.py(챗봇 서버)에 텐서플로우 메모리할당 코드 작성

+추가 2)
- 만약 답변이 없는 질문이나 의도 모델에 관한 질문이 들어오면 성능 개선이 필요하다
- 그래서 로그 기능을 추가한다.
- 로그 기능을 통해 사용자의 질문과 챗봇 엔진의 출력 결과를 로그로 축적해 챗봇의 성능을 개선해나간다.
- chatbot.py에 코드 작성(findAnswer.py 내용도 변경)
- 로그는 /logs/ chatbot.txt에 저장됨
- txt 내용은 
- 질문을 한시간, 질문내용, 의도종류, 정확도가 나옴

------------------------------------------------------------------------------------------
챗봇 api
- 챗봇 기능을 지원하는 메신저 플랫폼과 통신하기 위해서는 rest api방식으로 챗봇 서버를 구현해야함
- flask를 이용함
- rest api호출 시 챗봇 엔진 서버에 소켓 통신으로 접속해 질의에 대한 답변을 받아오는 api 서버를 chatbot_api/app.py로 생성
