db
모델은 스키마를 감싸주는 역할이다.
스키마 = 테이블?? 컬럼과 그 컬럼들의 내용들이 들어감 
스키마에는 그 컬럼 하나하나의 정보들을 지정해 줄 수 있음

bodyparser
클라이언트로 부터 온 정보를 bodyparser를 이용해서 서버에서 받을 수 있다.
app.use(bodyParser.urlencoded({extended: true})) //다른 형태의 데이터
app.use(bodyParser.json()) // json 형태의 데이터
위 두 코드가 클라이언트로부터 데이터를 가지고 오기 위한 코드
req.body를 이용해 client의 정보를 받아줌
req.body에는 
{
 id: "junoh"
 email: "junoh@naver.com"
}
이런 정보가 들어있음
즉 저렇게 있는 이유는 bodyparser를 이용했기 때문임

bcrypt
bcrypt를 이용해 db에 저장된 비밀번호를 암호화 시킴
user 모델에 client의 데이터를 저장하기(save) 전에 암호화를 시키고 저장을 해야한다.
비밀번호 암호화는 비밀번호 생성시, 비밀번호 변경시만 암호화를 해야한다.
즉, user모델에 있는 password feild가 변화될때만 비밀번호를 암호화시켜줌

로그인기능
1. db에서 요청한 email 찾기
2. db에서 요청한 email이 존재하면 비밀번호가 일치한지 확인
- 비밀번호가 일치한지 확인하려면 bcrypt를 이용해서 client로 부터 온 비밀번호를 암호화시켜서 db에 저장된 암호화된 비밀번호와 일치한지 확인하기
3. 비밀번호까지 일치하면 그 유저의 token 생성

token생성
token은 user._id + 'secretToken' = token이 생성됨
생성된 token을 user 모델에 넣어줌
쿠키에 token을 저장함
cookieparser이용해서 token을 cookie에 저장
client에서 token은 cookie에 저장하고 
server에서는 db에 저장한다.

Auth기능(유저 구별하기)
token을 디코딩하면 user id가 나오게 된다. 
그 user id에 있는 token이 client에 쿠키에 있는 token과 server db에 있는 token을 웹 이동시마다 계속 비교한다.
즉, client server 토큰이 일치하면 인증성공 불일치하면 인증실패

미들웨어
end point에서 request를 받은 다음에 callback함수 하기 전에 하는 것이다.
req.token=token
req.user=user
request에 넣어줌으로써 사용할 수 있게함